// Generated by BUCKLESCRIPT VERSION 3.1.1, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/lib/js/src/jest.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var DataLoader = require("../src/DataLoader.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

describe("Can handle errors", (function () {
        var batchLoadFun = function (strings) {
          return Promise.all($$Array.map((function (stringIdentity) {
                            var match = stringIdentity === "2";
                            if (match) {
                              return Promise.resolve(/* Error */Block.__(1, [Caml_builtin_exceptions.not_found]));
                            } else {
                              return Promise.resolve(/* Ok */Block.__(0, [stringIdentity]));
                            }
                          }), strings));
        };
        var IdentityLoaderImpl_001 = /* options : record */[
          /* batch */true,
          /* maxBatchSize */256,
          /* cache */true
        ];
        var IdentityLoaderImpl = /* module */[
          /* batchLoadFun */batchLoadFun,
          IdentityLoaderImpl_001
        ];
        return Jest.testPromise(/* None */0, "if a error is returned it will return the error", (function () {
                      var IdentityLoader = DataLoader.Make(IdentityLoaderImpl);
                      var load1 = Curry._1(IdentityLoader[/* load */12], "1");
                      var load2 = Curry._1(IdentityLoader[/* load */12], "2").catch((function () {
                              return Promise.resolve("error");
                            }));
                      return Promise.all(/* array */[
                                    load1,
                                    load2
                                  ]).then((function (loadedValues) {
                                    return Promise.resolve(Jest.Expect[/* toEqual */12](/* array */[
                                                    "1",
                                                    "error"
                                                  ], Jest.Expect[/* expect */0](loadedValues)));
                                  }));
                    }));
      }));

describe("Does not cache errors", (function () {
        var calls = [1];
        var batchLoadFun = function (strings) {
          var promises = $$Array.map((function (stringIdentity) {
                  var match = calls[0] === 1;
                  if (match) {
                    return Promise.resolve(/* Error */Block.__(1, [Caml_builtin_exceptions.not_found]));
                  } else {
                    return Promise.resolve(/* Ok */Block.__(0, [stringIdentity]));
                  }
                }), strings);
          calls[0] = calls[0] + 1 | 0;
          return Promise.all(promises);
        };
        var IdentityLoader = DataLoader.Make([
              batchLoadFun,
              /* record */[
                /* batch */false,
                /* maxBatchSize */256,
                /* cache */true
              ]
            ]);
        Jest.testPromise(/* None */0, "returns a error the first time", (function () {
                return Curry._1(IdentityLoader[/* load */12], "1").catch((function () {
                                return Promise.resolve("error");
                              })).then((function (loadedValue) {
                              return Promise.resolve(Jest.Expect[/* toEqual */12]("error", Jest.Expect[/* expect */0](loadedValue)));
                            }));
              }));
        return Jest.testPromise(/* None */0, "returns a value the second time", (function () {
                      return Curry._1(IdentityLoader[/* load */12], "1").catch((function () {
                                      return Promise.resolve("error");
                                    })).then((function (loadedValue) {
                                    return Promise.resolve(Jest.Expect[/* toEqual */12]("1", Jest.Expect[/* expect */0](loadedValue)));
                                  }));
                    }));
      }));

/*  Not a pure module */
