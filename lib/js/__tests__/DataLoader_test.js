// Generated by BUCKLESCRIPT VERSION 3.1.1, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/lib/js/src/jest.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var DataLoader = require("../src/DataLoader.js");

describe("Primary API", (function () {
        var batchLoadFun = function (strings) {
          return Promise.resolve($$Array.map((function (string) {
                            return /* Ok */Block.__(0, [string]);
                          }), strings));
        };
        var IdentityLoaderImpl_001 = /* options : record */[
          /* batch */false,
          /* maxBatchSize */256,
          /* cache */true
        ];
        var IdentityLoaderImpl = /* module */[
          /* batchLoadFun */batchLoadFun,
          IdentityLoaderImpl_001
        ];
        Jest.testPromise(/* None */0, "it builds a really simple data loader", (function () {
                var IdentityLoader = DataLoader.Make(IdentityLoaderImpl);
                return Curry._1(IdentityLoader[/* load */12], "1").then((function (loadedVal) {
                              return Promise.resolve(Jest.Expect[/* toBe */2]("1", Jest.Expect[/* expect */0](loadedVal)));
                            }));
              }));
        Jest.testPromise(/* None */0, "it supports loading multiple keys in one call", (function () {
                var IdentityLoader = DataLoader.Make(IdentityLoaderImpl);
                return Curry._1(IdentityLoader[/* loadMany */13], /* array */[
                              "1",
                              "2"
                            ]).then((function (loadedVal) {
                              return Promise.resolve(Jest.Expect[/* toEqual */12](/* array */[
                                              "1",
                                              "2"
                                            ], Jest.Expect[/* expect */0](loadedVal)));
                            }));
              }));
        Jest.testPromise(/* None */0, "it batches multiple requests", (function () {
                var IdentityLoader = DataLoader.Make(IdentityLoaderImpl);
                return Promise.all(/* array */[
                              Curry._1(IdentityLoader[/* load */12], "1"),
                              Curry._1(IdentityLoader[/* load */12], "2")
                            ]).then((function (loadedValues) {
                              return Promise.resolve(Jest.Expect[/* toEqual */12](/* array */[
                                              "1",
                                              "2"
                                            ], Jest.Expect[/* expect */0](loadedValues)));
                            }));
              }));
        Jest.testPromise(/* None */0, "it batches multiple requests with max batch sizes", (function () {
                var calls = /* array */[];
                var batchLoadFun = function (strings) {
                  calls.push(strings);
                  return Promise.resolve($$Array.map((function (string) {
                                    return /* Ok */Block.__(0, [string]);
                                  }), strings));
                };
                var IdentityLoaderBatchImpl_001 = /* options : record */[
                  /* batch */true,
                  /* maxBatchSize */2,
                  /* cache */true
                ];
                var IdentityLoaderBatchImpl = /* module */[
                  /* batchLoadFun */batchLoadFun,
                  IdentityLoaderBatchImpl_001
                ];
                var IdentityLoader = DataLoader.Make(IdentityLoaderBatchImpl);
                var load1 = Curry._1(IdentityLoader[/* load */12], "1");
                var load2 = Curry._1(IdentityLoader[/* load */12], "2");
                var load3 = Curry._1(IdentityLoader[/* load */12], "3");
                return Promise.all(/* array */[
                              load1,
                              load2,
                              load3
                            ]).then((function (loadedValues) {
                              return Promise.resolve(Jest.Expect[/* toEqual */12](/* tuple */[
                                              /* array */[
                                                "1",
                                                "2",
                                                "3"
                                              ],
                                              /* array */[
                                                /* array */[
                                                  "1",
                                                  "2"
                                                ],
                                                /* array */["3"]
                                              ]
                                            ], Jest.Expect[/* expect */0](/* tuple */[
                                                  loadedValues,
                                                  calls
                                                ])));
                            }));
              }));
        return Jest.testPromise(/* None */0, "coalesces identical requests", (function () {
                      var calls = /* array */[];
                      var batchLoadFun = function (strings) {
                        calls.push(strings);
                        return Promise.resolve($$Array.map((function (string) {
                                          return /* Ok */Block.__(0, [string]);
                                        }), strings));
                      };
                      var IdentityLoaderBatchImpl_001 = /* options : record */[
                        /* batch */true,
                        /* maxBatchSize */2,
                        /* cache */true
                      ];
                      var IdentityLoaderBatchImpl = /* module */[
                        /* batchLoadFun */batchLoadFun,
                        IdentityLoaderBatchImpl_001
                      ];
                      var IdentityLoader = DataLoader.Make(IdentityLoaderBatchImpl);
                      var promise1a = Curry._1(IdentityLoader[/* load */12], "1");
                      var promise1b = Curry._1(IdentityLoader[/* load */12], "1");
                      return Promise.all(/* array */[
                                    promise1a,
                                    promise1b
                                  ]).then((function (loadedValues) {
                                    return Promise.resolve(Jest.Expect[/* toEqual */12](/* tuple */[
                                                    /* array */[
                                                      "1",
                                                      "1"
                                                    ],
                                                    /* array */[/* array */["1"]]
                                                  ], Jest.Expect[/* expect */0](/* tuple */[
                                                        loadedValues,
                                                        calls
                                                      ])));
                                  }));
                    }));
      }));

describe("caches repeated requests", (function () {
        var calls = /* array */[];
        var batchLoadFun = function (strings) {
          calls.push(strings);
          return Promise.resolve($$Array.map((function (string) {
                            return /* Ok */Block.__(0, [string]);
                          }), strings));
        };
        var IdentityLoaderBatchImpl_001 = /* options : record */[
          /* batch */true,
          /* maxBatchSize */2,
          /* cache */true
        ];
        var IdentityLoaderBatchImpl = /* module */[
          /* batchLoadFun */batchLoadFun,
          IdentityLoaderBatchImpl_001
        ];
        var IdentityLoader = DataLoader.Make(IdentityLoaderBatchImpl);
        Jest.testPromise(/* None */0, "initial call", (function () {
                var load1a = Curry._1(IdentityLoader[/* load */12], "1");
                var load2 = Curry._1(IdentityLoader[/* load */12], "2");
                return Promise.all(/* array */[
                              load1a,
                              load2
                            ]).then((function (loadedValues) {
                              return Promise.resolve(Jest.Expect[/* toEqual */12](/* tuple */[
                                              /* array */[
                                                "1",
                                                "2"
                                              ],
                                              /* array */[/* array */[
                                                  "1",
                                                  "2"
                                                ]]
                                            ], Jest.Expect[/* expect */0](/* tuple */[
                                                  loadedValues,
                                                  calls
                                                ])));
                            }));
              }));
        return Jest.testPromise(/* None */0, "repeted requests", (function () {
                      var load1b = Curry._1(IdentityLoader[/* load */12], "1");
                      var load3 = Curry._1(IdentityLoader[/* load */12], "3");
                      return Promise.all(/* array */[
                                    load1b,
                                    load3
                                  ]).then((function (loadedValues) {
                                    return Promise.resolve(Jest.Expect[/* toEqual */12](/* tuple */[
                                                    /* array */[
                                                      "1",
                                                      "3"
                                                    ],
                                                    /* array */[
                                                      /* array */[
                                                        "1",
                                                        "2"
                                                      ],
                                                      /* array */["3"]
                                                    ]
                                                  ], Jest.Expect[/* expect */0](/* tuple */[
                                                        loadedValues,
                                                        calls
                                                      ])));
                                  }));
                    }));
      }));

describe("clear single value", (function () {
        var calls = /* array */[];
        var batchLoadFun = function (strings) {
          calls.push(strings);
          return Promise.resolve($$Array.map((function (string) {
                            return /* Ok */Block.__(0, [string]);
                          }), strings));
        };
        var IdentityLoaderImpl_001 = /* options : record */[
          /* batch */true,
          /* maxBatchSize */2,
          /* cache */true
        ];
        var IdentityLoaderImpl = /* module */[
          /* batchLoadFun */batchLoadFun,
          IdentityLoaderImpl_001
        ];
        var IdentityLoader = DataLoader.Make(IdentityLoaderImpl);
        Jest.testPromise(/* None */0, "can get a value", (function () {
                var load1a = Curry._1(IdentityLoader[/* load */12], "1");
                var load2a = Curry._1(IdentityLoader[/* load */12], "2");
                return Promise.all(/* array */[
                              load1a,
                              load2a
                            ]).then((function (loadedValues) {
                              return Promise.resolve(Jest.Expect[/* toEqual */12](/* tuple */[
                                              /* array */[
                                                "1",
                                                "2"
                                              ],
                                              /* array */[/* array */[
                                                  "1",
                                                  "2"
                                                ]]
                                            ], Jest.Expect[/* expect */0](/* tuple */[
                                                  loadedValues,
                                                  calls
                                                ])));
                            }));
              }));
        return Jest.testPromise(/* None */0, "clears single value in loader", (function () {
                      Curry._1(IdentityLoader[/* clear */6], "1");
                      var load1b = Curry._1(IdentityLoader[/* load */12], "1");
                      var load2b = Curry._1(IdentityLoader[/* load */12], "2");
                      return Promise.all(/* array */[
                                    load1b,
                                    load2b
                                  ]).then((function (loadedValues) {
                                    return Promise.resolve(Jest.Expect[/* toEqual */12](/* tuple */[
                                                    /* array */[
                                                      "1",
                                                      "2"
                                                    ],
                                                    /* array */[
                                                      /* array */[
                                                        "1",
                                                        "2"
                                                      ],
                                                      /* array */["1"]
                                                    ]
                                                  ], Jest.Expect[/* expect */0](/* tuple */[
                                                        loadedValues,
                                                        calls
                                                      ])));
                                  }));
                    }));
      }));

describe("clear all values", (function () {
        var calls = /* array */[];
        var batchLoadFun = function (strings) {
          calls.push(strings);
          return Promise.resolve($$Array.map((function (string) {
                            return /* Ok */Block.__(0, [string]);
                          }), strings));
        };
        var IdentityLoaderImpl_001 = /* options : record */[
          /* batch */true,
          /* maxBatchSize */2,
          /* cache */true
        ];
        var IdentityLoaderImpl = /* module */[
          /* batchLoadFun */batchLoadFun,
          IdentityLoaderImpl_001
        ];
        var IdentityLoader = DataLoader.Make(IdentityLoaderImpl);
        Jest.testPromise(/* None */0, "loads initial data", (function () {
                var load1a = Curry._1(IdentityLoader[/* load */12], "1");
                var load2a = Curry._1(IdentityLoader[/* load */12], "2");
                return Promise.all(/* array */[
                              load1a,
                              load2a
                            ]).then((function (loadedValues) {
                              return Promise.resolve(Jest.Expect[/* toEqual */12](/* tuple */[
                                              /* array */[
                                                "1",
                                                "2"
                                              ],
                                              /* array */[/* array */[
                                                  "1",
                                                  "2"
                                                ]]
                                            ], Jest.Expect[/* expect */0](/* tuple */[
                                                  loadedValues,
                                                  calls
                                                ])));
                            }));
              }));
        return Jest.testPromise(/* None */0, "clears all values in loader", (function () {
                      Curry._1(IdentityLoader[/* clearAll */7], /* () */0);
                      var load1b = Curry._1(IdentityLoader[/* load */12], "1");
                      var load2b = Curry._1(IdentityLoader[/* load */12], "2");
                      return Promise.all(/* array */[
                                    load1b,
                                    load2b
                                  ]).then((function (loadedValues) {
                                    return Promise.resolve(Jest.Expect[/* toEqual */12](/* tuple */[
                                                    /* array */[
                                                      "1",
                                                      "2"
                                                    ],
                                                    /* array */[
                                                      /* array */[
                                                        "1",
                                                        "2"
                                                      ],
                                                      /* array */[
                                                        "1",
                                                        "2"
                                                      ]
                                                    ]
                                                  ], Jest.Expect[/* expect */0](/* tuple */[
                                                        loadedValues,
                                                        calls
                                                      ])));
                                  }));
                    }));
      }));

describe("Priming the cache", (function () {
        Jest.testPromise(/* None */0, "it allows priming the cache", (function () {
                var calls = /* array */[];
                var batchLoadFun = function (strings) {
                  calls.push(strings);
                  return Promise.resolve($$Array.map((function (string) {
                                    return /* Ok */Block.__(0, [string]);
                                  }), strings));
                };
                var IdentityLoaderImpl_001 = /* options : record */[
                  /* batch */true,
                  /* maxBatchSize */2,
                  /* cache */true
                ];
                var IdentityLoaderImpl = /* module */[
                  /* batchLoadFun */batchLoadFun,
                  IdentityLoaderImpl_001
                ];
                var IdentityLoader = DataLoader.Make(IdentityLoaderImpl);
                Curry._2(IdentityLoader[/* prime */8], "1", "1");
                var load1 = Curry._1(IdentityLoader[/* load */12], "1");
                var load2 = Curry._1(IdentityLoader[/* load */12], "2");
                return Promise.all(/* array */[
                              load1,
                              load2
                            ]).then((function (loadedValues) {
                              return Promise.resolve(Jest.Expect[/* toEqual */12](/* tuple */[
                                              /* array */[
                                                "1",
                                                "2"
                                              ],
                                              /* array */[/* array */["2"]]
                                            ], Jest.Expect[/* expect */0](/* tuple */[
                                                  loadedValues,
                                                  calls
                                                ])));
                            }));
              }));
        return Jest.testPromise(/* None */0, "it does not prime keys that already exist", (function () {
                      var batchLoadFun = function (strings) {
                        return Promise.resolve($$Array.map((function (string) {
                                          return /* Ok */Block.__(0, [string]);
                                        }), strings));
                      };
                      var IdentityLoaderImpl_001 = /* options : record */[
                        /* batch */false,
                        /* maxBatchSize */256,
                        /* cache */true
                      ];
                      var IdentityLoaderImpl = /* module */[
                        /* batchLoadFun */batchLoadFun,
                        IdentityLoaderImpl_001
                      ];
                      var IdentityLoader = DataLoader.Make(IdentityLoaderImpl);
                      Curry._2(IdentityLoader[/* prime */8], "1", "A");
                      Curry._2(IdentityLoader[/* prime */8], "1", "B");
                      var load1 = Curry._1(IdentityLoader[/* load */12], "1");
                      var load2 = Curry._1(IdentityLoader[/* load */12], "2");
                      return Promise.all(/* array */[
                                    load1,
                                    load2
                                  ]).then((function (loadedValues) {
                                    return Promise.resolve(Jest.Expect[/* toEqual */12](/* array */[
                                                    "A",
                                                    "2"
                                                  ], Jest.Expect[/* expect */0](loadedValues)));
                                  }));
                    }));
      }));

describe("Priming the cache by force", (function () {
        var batchLoadFun = function (strings) {
          return Promise.resolve($$Array.map((function (string) {
                            return /* Ok */Block.__(0, [string]);
                          }), strings));
        };
        var IdentityLoaderImpl_001 = /* options : record */[
          /* batch */false,
          /* maxBatchSize */256,
          /* cache */true
        ];
        var IdentityLoaderImpl = /* module */[
          /* batchLoadFun */batchLoadFun,
          IdentityLoaderImpl_001
        ];
        var IdentityLoader = DataLoader.Make(IdentityLoaderImpl);
        Jest.testPromise(/* None */0, "allows priming the cache", (function () {
                Curry._2(IdentityLoader[/* prime */8], "1", "A");
                var load1a = Curry._1(IdentityLoader[/* load */12], "1");
                var load2a = Curry._1(IdentityLoader[/* load */12], "2");
                return Promise.all(/* array */[
                              load1a,
                              load2a
                            ]).then((function (loadedValues) {
                              return Promise.resolve(Jest.Expect[/* toEqual */12](/* array */[
                                              "A",
                                              "2"
                                            ], Jest.Expect[/* expect */0](loadedValues)));
                            }));
              }));
        return Jest.testPromise(/* None */0, "allows forcefully priming the cache", (function () {
                      Curry._1(IdentityLoader[/* clear */6], "1");
                      Curry._2(IdentityLoader[/* prime */8], "1", "X");
                      Curry._1(IdentityLoader[/* clear */6], "2");
                      Curry._2(IdentityLoader[/* prime */8], "2", "Y");
                      var load1b = Curry._1(IdentityLoader[/* load */12], "1");
                      var load2b = Curry._1(IdentityLoader[/* load */12], "2");
                      return Promise.all(/* array */[
                                    load1b,
                                    load2b
                                  ]).then((function (loadedValues) {
                                    return Promise.resolve(Jest.Expect[/* toEqual */12](/* array */[
                                                    "X",
                                                    "Y"
                                                  ], Jest.Expect[/* expect */0](loadedValues)));
                                  }));
                    }));
      }));

/*  Not a pure module */
